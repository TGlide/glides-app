import type { NextPage } from 'next';
import Head from 'next/head';
import { useQueryClient } from 'react-query';
import styled from 'styled-components';

import { Container } from 'UI/Layout';
import { Heading } from 'UI/Text';
import { AddPresentation } from 'components/AddPresentation';
import { Presentation } from 'components/Presentation';
import { trpc } from 'utils/trpc';

const Home: NextPage = () => {
	const { data, refetch } = trpc.useQuery(['presentation.getAll']);

	const createPresentation = trpc.useMutation(['presentation.create']);
	const deletePresentation = trpc.useMutation(['presentation.delete']);
	const client = useQueryClient();

	const addPresentation = async () => {
		await createPresentation.mutateAsync({ title: 'New presentation' });
		client.invalidateQueries(['presentation.getAll']);
	};

	const handleDeletePres = (id: string) => {
		return async () => {
			await deletePresentation.mutateAsync({ id });
			client.invalidateQueries(['presentation.getAll']);
		};
	};

	return (
		<>
			<Head>
				<title>Glides</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Main>
				<TopBar>
					<Logo src={'/logo_inverted.svg'} alt="Glides" />
				</TopBar>
				<Container>
					<Heading>Presentations</Heading>
					<Presentations>
						{data?.map((presentation) => (
							<Presentation key={presentation.id} {...presentation} />
						))}
						<AddPresentation onClick={addPresentation} />
					</Presentations>
				</Container>
			</Main>
		</>
	);
};

export default Home;

const Main = styled.div`
	min-height: 100vh;
`;

const TopBar = styled.div`
	background-color: ${({ theme }) => theme.colors.accent};
	padding: 16px 8px;
`;

const Logo = styled.img`
	width: auto;
	height: 1.25rem;
`;

const Presentations = styled.div`
	display: flex;
	gap: 0.75rem;
	flex-wrap: wrap;

	margin-top: 1rem;
`;
