import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useQueryClient } from 'react-query';
import styled from 'styled-components';

import { Container } from 'UI/Layout';
import { Heading } from 'UI/Text';
import { AddPresentation } from 'components/AddPresentation';
import { NetworkState } from 'components/NetworkState';
import { PresentationCard } from 'components/PresentationCard';
import { TopBar } from 'components/TopBar';
import { trpc } from 'utils/trpc';

const Home: NextPage = () => {
	const router = useRouter();
	const client = useQueryClient();

	const { data, isLoading, error } = trpc.useQuery(['presentation.getAll']);
	const createPresentation = trpc.useMutation(['presentation.create']);

	const addPresentation = async () => {
		await createPresentation.mutateAsync({ title: 'New presentation' });
		client.invalidateQueries(['presentation.getAll']);
	};

	if (isLoading || error) {
		return <NetworkState loading={isLoading} error={!!error} />;
	}

	return (
		<>
			<Head>
				<title>Glides</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Main>
				<TopBar />
				<StyledContainer>
					<Heading>Presentations</Heading>
					<Presentations>
						{data?.map((presentation) => (
							<PresentationCard
								key={presentation.id}
								onClick={() => router.push(`/presentation/${presentation.id}`)}
								{...presentation}
							/>
						))}
						<AddPresentation onClick={addPresentation} />
					</Presentations>
				</StyledContainer>
			</Main>
		</>
	);
};

export default Home;

const StyledContainer = styled(Container)`
	flex: 1;
`;

const Presentations = styled.div`
	display: flex;
	gap: 0.75rem;
	flex-wrap: wrap;

	margin-top: 1rem;
`;

const Main = styled.div`
	display: flex;
	flex-direction: column;
	height: 100vh;
	overflow: hidden;
`;
