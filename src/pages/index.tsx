import type { NextPage } from 'next';
import Head from 'next/head';
import styled from 'styled-components';

import { Heading } from 'components/Text';
import { trpc } from 'utils/trpc';

const Home: NextPage = () => {
	const { data, refetch } = trpc.useQuery(['presentation.getAll']);

	const createPresentation = trpc.useMutation(['presentation.create']);
	const deletePresentation = trpc.useMutation(['presentation.delete']);

	const addPresentation = async () => {
		await createPresentation.mutateAsync(undefined);
		refetch();
	};

	const handleDeletePres = (id: string) => {
		return async () => {
			await deletePresentation.mutateAsync({ id });
			refetch();
		};
	};

	return (
		<>
			<Head>
				<title>Glides</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Wrapper>
				<div>
					<Heading>Glides</Heading>

					<Button className="add" onClick={addPresentation}>
						Add presentation
					</Button>

					<Presentations>
						<p>{data?.length} presentations</p>
						{data?.map((presentation) => (
							<Presentation key={presentation.id}>
								Presentation {presentation.id}
								<Button onClick={handleDeletePres(presentation.id)}>Delete</Button>
							</Presentation>
						))}
					</Presentations>
				</div>
			</Wrapper>
		</>
	);
};

export default Home;

const Wrapper = styled.div`
	display: grid;
	place-items: center;
	min-height: 100vh;
	text-align: center;
`;

const Button = styled.button`
	border: 1px solid #000;
	border-radius: 0.5rem;
	padding: 0.5rem;

	&.add {
		margin-top: 1rem;
	}
`;

const Presentations = styled.div`
	display: flex;
	flex-direction: column;
	gap: 0.5rem;
	margin-top: 1rem;
`;

const Presentation = styled.div`
	display: flex;
	align-items: center;
	gap: 0.5rem;
`;
